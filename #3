/* 1)	Write a function, which receives an array as an argument which elements arrays of numbers. Find biggest negative number of each array. Return product of that numbers.If there is not any negative number in an array, ignore that one. Check that items of the given array are arrays. */

function powMaxNegative(arr=[]) {

      let maxNegativeElem = arr.map(function(item){
          if(Array.isArray(item)) {
             let res = item.filter(i => i < 0 );
              return res;
            } else {
               return "Not Array";             
          }
      } );
        let negArr = maxNegativeElem.map(arrMax)
            return negArr.reduce(function(pow, currI){
                if(negArr.every(elem => elem ===1)){
                    return "No negative";
            } else if(negArr.every(elem => typeof elem !== "number")) {
                return "Invalid argument";
                    } else return pow * currI;
            })
        }
    let arrMax = function(arrx = []) {
        let max;
        if(arrx.length === 0) {
            max = 1;
        } else {
          for(let j = 0; j < arrx.length-1; j++) {
            if(arrx[j] > arrx[j+1]) {
                max = arrx[j];
            } else {
                max = arrx[j+1];
            };
        }
    }
	return max;
};
   
  
console.log(powMaxNegative([[2, -9, -3, 0], [1, 2], [-4 , -11, 0]]));
console.log(powMaxNegative([[3, 4], [11, 0], [5, 6, 7, 8]]));
console.log(powMaxNegative([1, 2, 3]));


/* 2)	Given an array of strings and numbers. Print the number of integers and the number of strings in the array. */

function countOfMembers(arr=[]) {
    let countNum = 0, countStr = 0;
    arr.map(function(item) {
        switch(typeof item) {
            case 'number':
                countNum++;
                break;
            default:
                countStr++;
            }
        });
        return "Numbers: " + countNum + ", String: " + countStr;
    }
 console.log(countOfMembers([1, '10', 'hi', 2, 3]));
 console.log(countOfMembers([1, 4, 'i am a string', '456']));



/* 3)	Given an array consisting from the arrays of numbers (like a two-dimensional array). Find sum of each row and print them as an array. */
//function sumOfNumbers(arr) {
    
    let arr = [[ 8, 35, 2], [8], [5, 6, -5 , -6], [1, 3, -9, 0, -1]];
    let arrNew = arr.map(item => item.reduce((sum, current) => sum + current));
    console.log(arrNew);

 

/* 4)	Given an array of integers. Write a function that return new array from first array, where  removed even numbers, and odd numbers was multiplied with new array length */

 function multOddNumbersWithLength(arr = []) {
     let filteredNum = arr.filter(item => item % 2 !== 0);
     let resultArr = filteredNum.map(i => i*filteredNum.length);
     return resultArr;
 }
console.log(multOddNumbersWithLength([5, 4, 78, 0, -3, 7]));
console.log(multOddNumbersWithLength([2, 4, 6, 88]));
console.log(multOddNumbersWithLength([]));

/* 5)	Given an array of numbers. Create an array containing only elements once. */
    
 function onlyOne(arr = []) {
    let newArr = arr.reduce(function(acc, currentItem) {
      if(!acc.includes(currentItem))
        acc.push(currentItem);
        return acc;
    }, []);
    return newArr;
   }
   console.log(onlyOne([1, 2, 3, 3, 2, 5]));
   console.log(onlyOne([4, 4]));


/* 6)	Given an array. Create the array which elements are products between two neighbours. */

let arrOne = [3, 7, 12, 5, 20, 0];
let arrTwo = [];
for(i = 1; i < arrOne.length; i++){
    arrTwo.push(arrOne[i]);
}
let j = 0;
while(j < arrTwo.length) {
var newArr = arrTwo.reduce(function(accum, currentI){

    accum.push(currentI*arrOne[j]);
      j++;
      return accum;
  
}, []);
}
console.log(newArr);
